name: Build, Test, and Release

on:
  push:
    branches: [ main, master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.19'
          cache: true

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.51.2
          args: --timeout=5m

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.19'
          cache: true

      - name: Install Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y chromium-browser
          echo "CHROME_BIN=/usr/bin/chromium-browser" >> $GITHUB_ENV
          echo "CHROME_PATH=/usr/lib/chromium/" >> $GITHUB_ENV

      - name: Install dependencies
        run: go mod download

      - name: Run unit tests
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.txt
          fail_ci_if_error: false

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.19'
          cache: true

      - name: Install Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y chromium-browser
          echo "CHROME_BIN=/usr/bin/chromium-browser" >> $GITHUB_ENV
          echo "CHROME_PATH=/usr/lib/chromium/" >> $GITHUB_ENV

      - name: Install xcaddy
        run: go install github.com/caddyserver/xcaddy/cmd/xcaddy@latest

      - name: Build Caddy with module
        run: xcaddy build --with github.com/${{ github.repository }}=.

      - name: Start test server
        run: |
          mkdir -p testdata
          echo "<html><body><h1>Test Page</h1></body></html>" > testdata/index.html
          python3 -m http.server 8080 --directory testdata &
          echo $! > server.pid

      - name: Create Caddyfile
        run: |
          cat > Caddyfile <<EOF
          {
            debug
          }
          localhost:9080 {
            route {
              headless_proxy {
                upstream http://localhost:8080
                timeout 30
                enable_js true
                max_browsers 2
                cache_ttl 60
                optimize_resources true
                minify_content true
                compress_images true
                forward_cookies true
                forward_headers X-Real-IP,X-Forwarded-For,User-Agent
                user_agent "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
              }
            }
          }
          EOF

      - name: Start Caddy
        run: |
          ./caddy run --config Caddyfile &
          echo $! > caddy.pid
          sleep 5  # Give Caddy time to start

      - name: Test proxy
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:9080/)
          if [ "$response" != "200" ]; then
            echo "Expected status code 200, got $response"
            exit 1
          fi
          content=$(curl -s http://localhost:9080/)
          if [[ "$content" != *"Test Page"* ]]; then
            echo "Expected content to contain 'Test Page', got:"
            echo "$content"
            exit 1
          fi
          echo "Integration test passed!"

      - name: Cleanup
        run: |
          kill $(cat caddy.pid) || true
          kill $(cat server.pid) || true

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
        exclude:
          - os: windows
            arch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.19'
          cache: true

      - name: Install xcaddy
        run: go install github.com/caddyserver/xcaddy/cmd/xcaddy@latest

      - name: Build Caddy with module
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
        run: |
          OUTPUT="caddy-headless-proxy-${{ matrix.os }}-${{ matrix.arch }}"
          if [ "${{ matrix.os }}" = "windows" ]; then
            OUTPUT="${OUTPUT}.exe"
          fi
          xcaddy build --with github.com/${{ github.repository }}=. --output $OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: caddy-headless-proxy-${{ matrix.os }}-${{ matrix.arch }}
          path: caddy-headless-proxy-${{ matrix.os }}-${{ matrix.arch }}*
          if-no-files-found: error

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/caddy-headless-proxy
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=short

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        uses: metcalfc/changelog-generator@v4.0.1
        with:
          myToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Create release assets directory
        run: |
          mkdir -p release-assets
          find . -name "caddy-headless-proxy-*" -type f -exec cp {} release-assets/ \;
          cd release-assets
          for file in *; do
            if [[ ! "$file" == *.zip && ! "$file" == *.tar.gz ]]; then
              if [[ "$file" == *.exe ]]; then
                zip "${file%.exe}.zip" "$file"
                rm "$file"
              else
                tar -czf "$file.tar.gz" "$file"
                rm "$file"
              fi
            fi
          done
          cd ..

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          body: |
            ## Changes
            ${{ steps.changelog.outputs.changelog }}
            
            ## Installation
            
            ### Using xcaddy
            ```bash
            xcaddy build --with github.com/${{ github.repository }}@${{ github.ref_name }}
            ```
            
            ### Using Docker
            ```bash
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/caddy-headless-proxy:${{ github.ref_name }}
            ```
          files: release-assets/*
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [release, docker]
    if: always() && (needs.release.result == 'success' || needs.docker.result == 'success')
    steps:
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: releases
          SLACK_COLOR: ${{ job.status }}
          SLACK_ICON: https://github.com/caddyserver.png?size=48
          SLACK_TITLE: New Release - Caddy Headless Proxy
          SLACK_MESSAGE: 'New version ${{ github.ref_name }} has been released! :rocket:'
          SLACK_FOOTER: 'GitHub Actions'
        
